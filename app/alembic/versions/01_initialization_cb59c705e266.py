"""01 initialization

Revision ID: cb59c705e266
Revises: 
Create Date: 2025-08-17 19:28:24.598427

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cb59c705e266'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('idempotency_keys',
    sa.Column('cod_idempotency_keys', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('update_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('delete_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('create_user', sa.Integer(), nullable=False),
    sa.Column('user_at', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('client_id', sa.String(length=64), nullable=False),
    sa.Column('key', sa.String(length=128), nullable=False),
    sa.Column('request_fingerprint', sa.String(length=64), nullable=False),
    sa.Column('response_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('http_status', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=16), server_default='processing', nullable=False),
    sa.PrimaryKeyConstraint('cod_idempotency_keys', name=op.f('pk_idempotency_keys')),
    sa.UniqueConstraint('client_id', 'key', name='uq_client_idem'),
    schema='bootstrap_app'
    )
    op.create_index(op.f('ix_bootstrap_app_idempotency_keys_client_id'), 'idempotency_keys', ['client_id'], unique=False, schema='bootstrap_app')
    op.create_table('integration_clients',
    sa.Column('cod_integration_client', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('update_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('delete_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('create_user', sa.Integer(), nullable=False),
    sa.Column('user_at', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('client_id', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('cod_integration_client', name=op.f('pk_integration_clients')),
    schema='bootstrap_app'
    )
    op.create_index(op.f('ix_bootstrap_app_integration_clients_client_id'), 'integration_clients', ['client_id'], unique=True, schema='bootstrap_app')
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    schema='mcs'
    )
    op.create_index(op.f('ix_mcs_users_email'), 'users', ['email'], unique=True, schema='mcs')
    op.create_table('client_ips',
    sa.Column('cod_client_ip', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('update_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('delete_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('create_user', sa.Integer(), nullable=False),
    sa.Column('user_at', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('integration_client_cod', sa.Integer(), nullable=False),
    sa.Column('cidr', postgresql.CIDR(), nullable=False),
    sa.ForeignKeyConstraint(['integration_client_cod'], ['bootstrap_app.integration_clients.cod_integration_client'], name=op.f('fk_client_ips_integration_client_cod_integration_clients'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('cod_client_ip', name=op.f('pk_client_ips')),
    sa.UniqueConstraint('integration_client_cod', 'cidr', name='uq_client_ip_per_client'),
    schema='bootstrap_app'
    )
    op.create_table('client_keys',
    sa.Column('cod_client_key', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('update_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('delete_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('create_user', sa.Integer(), nullable=False),
    sa.Column('user_at', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('integration_client_cod', sa.Integer(), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('secret', sa.String(), nullable=False),
    sa.Column('alg', sa.String(length=16), server_default='HS256', nullable=False),
    sa.Column('kid', sa.String(length=64), nullable=False),
    sa.ForeignKeyConstraint(['integration_client_cod'], ['bootstrap_app.integration_clients.cod_integration_client'], name=op.f('fk_client_keys_integration_client_cod_integration_clients'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('cod_client_key', name=op.f('pk_client_keys')),
    sa.UniqueConstraint('integration_client_cod', 'kid', name='uq_integration_client_kid'),
    schema='bootstrap_app'
    )
    op.create_table('security_nonces',
    sa.Column('cod_security_nonce', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('integration_client_cod', sa.Integer(), nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('update_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('delete_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('create_user', sa.Integer(), nullable=False),
    sa.Column('user_at', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('client_id', sa.String(length=64), nullable=False),
    sa.Column('nonce', sa.String(length=64), nullable=False),
    sa.Column('request_ts', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('received_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['integration_client_cod'], ['bootstrap_app.integration_clients.cod_integration_client'], name=op.f('fk_security_nonces_integration_client_cod_integration_clients'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('cod_security_nonce', name=op.f('pk_security_nonces')),
    sa.UniqueConstraint('client_id', 'nonce', name='uq_nonce_per_client'),
    schema='bootstrap_app'
    )
    op.create_index(op.f('ix_bootstrap_app_security_nonces_client_id'), 'security_nonces', ['client_id'], unique=False, schema='bootstrap_app')
    op.create_table('items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['mcs.users.id'], name=op.f('fk_items_owner_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_items')),
    schema='mcs'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('items', schema='mcs')
    op.drop_index(op.f('ix_bootstrap_app_security_nonces_client_id'), table_name='security_nonces', schema='bootstrap_app')
    op.drop_table('security_nonces', schema='bootstrap_app')
    op.drop_table('client_keys', schema='bootstrap_app')
    op.drop_table('client_ips', schema='bootstrap_app')
    op.drop_index(op.f('ix_mcs_users_email'), table_name='users', schema='mcs')
    op.drop_table('users', schema='mcs')
    op.drop_index(op.f('ix_bootstrap_app_integration_clients_client_id'), table_name='integration_clients', schema='bootstrap_app')
    op.drop_table('integration_clients', schema='bootstrap_app')
    op.drop_index(op.f('ix_bootstrap_app_idempotency_keys_client_id'), table_name='idempotency_keys', schema='bootstrap_app')
    op.drop_table('idempotency_keys', schema='bootstrap_app')
    # ### end Alembic commands ###
